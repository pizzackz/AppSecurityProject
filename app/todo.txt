General:
    Write handlers for possible status codes (401, 404, 421, 429, 500)
    Review & enhance session handling mechanisms
    Allow messages to be displayed when accessing pages that user is not allowed to

Models:
    Implement daily generation of admin master key
    Add new column for ending date for premium members
    Write sql scripts for seeding of database
    Write a function to generate new user id

Signup:
    Implement rate limiting for OTP requests

Recovery:
    Implement log out for active account using same username after successful reset of password
    Implement rate limiting for OTP requests, recovery requests

Login:
    Implement rate limiting for login requests

Password forms:
    Fix password reset/ set buttons not being able to be disabled on frontend

Member Profile:
    Allow deletion of own account
    Implement log out for active account using same username after successful reset of password

Admin Profile:
    Implement log out for active account using same username after successful reset of password

Admin Account Management Flow Summary:
    Secure Interface Access:
        All routes require validation of a valid master key and session duration.

    Admin List:
        Display id, pfp, username, email, created_at, last_login
    
    Specific Admin Account View:
        Display id, pfp, username, email, phone_number, address, postal_code, created_at, updated_at, last_login,
            last_logout, account_status, admin_key (click to send), admin_key_expiry (click to re-generate & send)

    Admin Account Deletion:
        Admin accounts can be deleted after master key validation.
        No updates allowed through the management interface, only via profile pages.

    Session Handling:
        On any check failure (master key, session expiry), the session is cleared and redirected to authentication.

    Read-Only Interface:
        The interface allows viewing admin accounts, with actions limited to creation and deletion.

    Logging and Monitoring:
        Every action is logged for security and auditing purposes.
        
    Rate Limiting:
        Rate limiting is implemented on authentication and sensitive actions to prevent brute force attacks.
    
    JWT Encryption:
        JWTs are encrypted to protect sensitive information in transit and at rest, ensuring secure handling of sensitive data like OTPs and user identity information.
    
    Flask-JWT-Extended Integration:
        Used for handling JWT creation, validation, and management, with additional encryption of sensitive data using the cryptography library.
    
